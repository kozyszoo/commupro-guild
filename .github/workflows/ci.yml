name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # TypeScript/Node.js テスト
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type check
      run: npx tsc --noEmit
      
    - name: Run linter
      run: npx eslint . --ext .ts,.js --max-warnings 0 || echo "ESLint not configured, skipping..."
      
    - name: Run tests
      run: npm test || echo "No tests configured, skipping..."

  # Firebase Functions テスト
  test-functions:
    name: Firebase Functions Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./functions
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript build
      run: npm run build
      
    - name: Run tests
      run: npm test || echo "No tests configured, skipping..."

  # Python Bot テスト
  test-python-bot:
    name: Python Bot Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bot
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: bot/requirements.txt
        
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio flake8
        
    - name: Run linter
      run: |
        cd bot
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Run tests with coverage
      run: |
        cd bot
        PYTHONPATH=$PYTHONPATH:$(pwd)/src
        export PYTHONPATH
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      env:
        # テスト用のモック環境変数
        DISCORD_BOT_TOKEN_MIYA: "test_token_miya"
        DISCORD_BOT_TOKEN_EVE: "test_token_eve"
        GCP_PROJECT_ID: "test-project"
        GCP_LOCATION: "us-central1"
        FIREBASE_SERVICE_ACCOUNT: '{"type":"service_account","project_id":"test"}'
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./bot/coverage.xml
        working-directory: ./bot
        flags: python-bot
        name: python-bot-coverage

  # セキュリティチェック
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 依存関係チェック
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Run npm audit
      run: npm audit --audit-level=high
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety
      run: pip install safety
      
    - name: Run Python security check
      run: safety check -r bot/requirements.txt

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Miya Bot Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./bot
        file: ./bot/config/docker/Dockerfile
        push: false
        tags: discord-nyanco-agent-miya:test
        build-args: |
          BOT_CHARACTER=miya
        
    - name: Build Eve Bot Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./bot
        file: ./bot/config/docker/Dockerfile
        push: false
        tags: discord-nyanco-agent-eve:test
        build-args: |
          BOT_CHARACTER=eve

  # 全テスト成功確認
  test-success:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [test-typescript, test-functions, test-python-bot, security-scan, dependency-check, docker-build]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test-typescript.result }}" != "success" ]] || \
           [[ "${{ needs.test-functions.result }}" != "success" ]] || \
           [[ "${{ needs.test-python-bot.result }}" != "success" ]] || \
           [[ "${{ needs.security-scan.result }}" != "success" ]] || \
           [[ "${{ needs.dependency-check.result }}" != "success" ]] || \
           [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "Some tests failed"
          exit 1
        fi
        echo "All tests passed!"
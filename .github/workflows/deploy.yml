name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [ main ]
    types: [ completed ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: 'asia-northeast1'
  NODE_VERSION: '20'

jobs:
  # „Éá„Éó„É≠„Ç§Ââç„ÅÆ„ÉÜ„Çπ„ÉàÁ¢∫Ë™ç
  verify-tests:
    name: Verify Tests Passed
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    
    steps:
    - name: Verify CI passed
      run: echo "All tests passed, proceeding with deployment"

  # Firebase Functions & Hosting „Éá„Éó„É≠„Ç§
  deploy-firebase:
    name: Deploy Firebase
    runs-on: ubuntu-latest
    needs: verify-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Firebase Functions dependencies
      run: |
        cd functions
        npm ci
        
    - name: Build TypeScript project
      run: npm run build
      
    - name: Build Firebase Functions
      run: |
        cd functions
        npm run build
        
    - name: Deploy to Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
        channelId: live

  # Docker „Ç§„É°„Éº„Ç∏„Éì„É´„Éâ & „Éó„ÉÉ„Ç∑„É•
  build-and-push-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: verify-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: Setup Artifact Registry repository
      run: |
        # Artifact Registry„É™„Éù„Ç∏„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç„Å®‰ΩúÊàê
        if ! gcloud artifacts repositories describe docker-repo --location=asia-northeast1 &>/dev/null; then
          echo "Creating Artifact Registry repository..."
          gcloud artifacts repositories create docker-repo \
            --repository-format=docker \
            --location=asia-northeast1 \
            --description="Docker images for Discord bots" \
            --async
          
          # ‰ΩúÊàêÂÆå‰∫Ü„ÇíÂæÖÊ©ü
          echo "Waiting for repository creation..."
          sleep 10
          
          # ‰ΩúÊàêÁ¢∫Ë™ç
          if ! gcloud artifacts repositories describe docker-repo --location=asia-northeast1 &>/dev/null; then
            echo "Failed to create repository, continuing anyway..."
          else
            echo "Repository created successfully"
          fi
        else
          echo "Repository already exists"
        fi
        
    - name: Configure Docker to use gcloud as credential helper  
      run: |
        gcloud auth configure-docker asia-northeast1-docker.pkg.dev --quiet
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Miya Bot image
      uses: docker/build-push-action@v5
      with:
        context: ./bot
        file: ./bot/config/docker/Dockerfile
        push: true
        tags: |
          asia-northeast1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker-repo/discord-nyanco-agent-miya:latest
          asia-northeast1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker-repo/discord-nyanco-agent-miya:${{ github.sha }}
        build-args: |
          BOT_CHARACTER=miya
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Eve Bot image
      uses: docker/build-push-action@v5
      with:
        context: ./bot
        file: ./bot/config/docker/Dockerfile
        push: true
        tags: |
          asia-northeast1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker-repo/discord-nyanco-agent-eve:latest
          asia-northeast1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker-repo/discord-nyanco-agent-eve:${{ github.sha }}
        build-args: |
          BOT_CHARACTER=eve
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Cloud Run „Éá„Éó„É≠„Ç§
  deploy-cloud-run:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-and-push-docker]
    strategy:
      matrix:
        bot: [miya, eve]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy discord-nyanco-agent-${{ matrix.bot }} \
          --image asia-northeast1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker-repo/discord-nyanco-agent-${{ matrix.bot }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --set-env-vars BOT_CHARACTER=${{ matrix.bot }} \
          --set-secrets="DISCORD_BOT_TOKEN_$(echo ${{ matrix.bot }} | tr '[:lower:]' '[:upper:]')=discord-bot-token-${{ matrix.bot }}:latest" \
          --set-secrets="FIREBASE_SERVICE_ACCOUNT=firebase-service-account:latest" \
          --set-secrets="GCP_PROJECT_ID=gcp-project-id:latest" \
          --set-secrets="GCP_LOCATION=gcp-location:latest" \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 1 \
          --timeout 3600 \
          --port 8080

  # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-firebase, deploy-cloud-run]
    
    steps:
    - name: Wait for deployment
      run: sleep 60
      
    - name: Check Firebase Hosting
      run: |
        curl -f https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app/health || \
        curl -f https://${{ secrets.FIREBASE_PROJECT_ID }}.firebaseapp.com/health || \
        echo "Firebase hosting health check failed"
        
    - name: Check Miya Bot Cloud Run
      run: |
        MIYA_URL=$(gcloud run services describe discord-nyanco-agent-miya \
          --region=${{ env.GCP_REGION }} \
          --format="value(status.url)")
        curl -f $MIYA_URL/health || echo "Miya bot health check failed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        
    - name: Check Eve Bot Cloud Run
      run: |
        EVE_URL=$(gcloud run services describe discord-nyanco-agent-eve \
          --region=${{ env.GCP_REGION }} \
          --format="value(status.url)")
        curl -f $EVE_URL/health || echo "Eve bot health check failed"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

  # SlackÈÄöÁü•
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-firebase, deploy-cloud-run, health-check]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-firebase.result == 'success' && needs.deploy-cloud-run.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          üéâ Deployment Successful!
          ‚Ä¢ Firebase: Deployed
          ‚Ä¢ Cloud Run: Both bots deployed
          ‚Ä¢ Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify Failure
      if: needs.deploy-firebase.result == 'failure' || needs.deploy-cloud-run.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ‚ùå Deployment Failed!
          ‚Ä¢ Firebase: ${{ needs.deploy-firebase.result }}
          ‚Ä¢ Cloud Run: ${{ needs.deploy-cloud-run.result }}
          ‚Ä¢ Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}